#Base.include(Main,"SymGroupAndReps.jl")
using GRUtils
using StatsBase
using Statistics

obs = readlines("UPENNPLASMA.csv")
VCmap = Dict{String,Int8}(["bl"=>0,"m06"=>6,"m12"=>12,"m18"=>18,"m24"=>24,"m36"=>36,"m48"=>48])
parsedObs = map(obs[2:end]) do line
	l = split(replace(line, '"' => ""), ",")[1:4]
	return (parse(Int16,l[1]), VCmap[l[2]], l[3]=="" ? -1 : parse(Float64,l[3]), l[4]=="" ? -1 : parse(Float64,l[4]))
end
cleanObs = filter(y-> !(-1 in y), parsedObs)
RIDs = sort(unique(first.(cleanObs)))
N = length(RIDs)

byPat = []
for r in RIDs
	patObs = filter(x->x[1]==r,cleanObs)
	if length(patObs)!=1
		t = map(x->x[2],patObs)
		AB40 = map(x->x[3],patObs)
		AB42 = map(x->x[4],patObs)
		push!(byPat, (r,t,AB40,AB42,AB42 ./ AB40))
	end
end
Samp = filter(p->p[2]==[0,12,24,36],byPat)
n = length(Samp)
sRIDs = [Int(p[1]) for p in Samp]

DX = Dict{Int,Array{Int}}([r=>[] for r in sRIDs])
info = readlines("DXSUM_PDXCONV_ADNIALL.csv")
for line in info[2:end]
	l = split(replace(line,'"'=>""),",")
	r = parse(Int,l[3])
	if r in sRIDs
		if length(l[12])!=0
			d = parse(Int,l[12])
			push!(DX[r], d)
		end
	end
end

for r in sRIDs DX[r] = unique(DX[r]) end

# 3=AD,2=MCI,1=NL
#G = zeros((3,4,372,103));
#Gr = zeros((3,4,134));
D = zeros((2,2,2,4,372,103));
Dr = zeros((2,2,2,4,134));
for p in Samp
	c = length(DX[p[1]])
	e = Int.(DX[p[1]])
	e_1 = Int(1 in e)+1
	e_2 = Int(2 in e)+1
	e_3 = Int(3 in e)+1
	g_k = maximum(e)
	for i in 1:4
		D[e_1, e_2, e_3, i, Int(round(p[3][i])), Int(round(p[4][i])) ] += 1/4
		Dr[e_1, e_2, e_3, i, Int(round(p[4][i]/p[3][i] *100)) ] += 1/4
		#G[ g_k, i,Int(round(p[3][i])), Int(round(p[4][i]))] += 1/4
		#Gr[ g_k, i,Int(round(p[4][i]/p[3][i] *100)) ] += 1/4
	end
end
D/=n;
Dr/=n;
#G/= n;
#Gr/=n;

d = zeros(2,2,2,3,372,103);
dr = zeros(2,2,2,3,134);
for i in 1:3
	d[:,:,:,i,:,:] = (D[:,:,:,i+1,:,:] - D[:,:,:,i,:,:])
	dr[:,:,:,i,:] = (Dr[:,:,:,i+1,:] - Dr[:,:,:,i,:])
end

F(x::Array) = [sum([x[j]*exp(-im*2*π*k*(j-1)/length(x)) for j in 1:length(x)]) for k in 1:length(x)]

⊗(A::Array{T},B::Array{T}) where T<: Number = prod.(Base.product(A,B))
E(X::Array,i::K) where {K<:Integer} =dropdims( sum(X,dims=setdiff(1:ndims(X),i)),dims=tuple(setdiff(1:ndims(X),i)...) )
E(X::Array,I::NTuple) =dropdims(sum(X,dims=setdiff(1:ndims(X),I)),dims=tuple(setdiff(1:ndims(X),I)...))
cov(X::Array,i::K,j::K) where {K<:Integer} = E(X,(i,j))- E(X,i)⊗E(X,j) / sum(E(X,i)⊗E(X,j))
cov(X::Array,I::NTuple,j::K) where {K<:Integer} = E(X,(I...,j))-E(X,I)⊗E(X,j)
cov(X::Array,i::K,J::NTuple) where {K<:Integer} = E(X,(i,J...))-E(X,i)⊗E(X,J)
cov(X::Array,I::NTuple,J::NTuple) =E(X,(I...,J...))-E(I)⊗E(J)

data = (t=[p[2] for p in Samp],AB40=[p[3] for p in Samp],AB42=[p[4] for p in Samp],ABratio=[p[5] for p in Samp])



s = "AGTTTCCTCGGCAGCGGTAGGCGAGAGCACGCGGAGGAGCGTGCGCGGGGGCCCCGGGAGACGGCGGCGGTGGCGGCGCGGGCAGAGCAAGGACGCGGCGGATCCCACTCGCACAGCAGCGCACTCGGTGCCCCGCGCAGGGTCGCGATGCTGCCCGGTTTGGCACTGCTCCTGCTGGCCGCCTGGACGGCTCGGGCGCTGGAGGTACCCACTGATGGTAATGCTGGCCTGCTGGCTGAACCCCAGATTGCCATGTTCTGTGGCAGACTGAACATGCACATGAATGTCCAGAATGGGAAGTGGGATTCAGATCCATCAGGGACCAAAACCTGCATTGATACCAAGGAAGGCATCCTGCAGTATTGCCAAGAAGTCTACCCTGAACTGCAGATCACCAATGTGGTAGAAGCCAACCAACCAGTGACCATCCAGAACTGGTGCAAGCGGGGCCGCAAGCAGTGCAAGACCCATCCCCACTTTGTGATTCCCTACCGCTGCTTAGTTGGTGAGTTTGTAAGTGATGCCCTTCTCGTTCCTGACAAGTGCAAATTCTTACACCAGGAGAGGATGGATGTTTGCGAAACTCATCTTCACTGGCACACCGTCGCCAAAGAGACATGCAGTGAGAAGAGTACCAACTTGCATGACTACGGCATGTTGCTGCCCTGCGGAATTGACAAGTTCCGAGGGGTAGAGTTTGTGTGTTGCCCACTGGCTGAAGAAAGTGACAATGTGGATTCTGCTGATGCGGAGGAGGATGACTCGGATGTCTGGTGGGGCGGAGCAGACACAGACTATGCAGATGGGAGTGAAGACAAAGTAGTAGAAGTAGCAGAGGAGGAAGAAGTGGCTGAGGTGGAAGAAGAAGAAGCCGATGATGACGAGGACGATGAGGATGGTGATGAGGTAGAGGAAGAGGCTGAGGAACCCTACGAAGAAGCCACAGAGAGAACCACCAGCATTGCCACCACCACCACCACCACCACAGAGTCTGTGGAAGAGGTGGTTCGAGTTCCTACAACAGCAGCCAGTACCCCTGATGCCGTTGACAAGTATCTCGAGACACCTGGGGATGAGAATGAACATGCCCATTTCCAGAAAGCCAAAGAGAGGCTTGAGGCCAAGCACCGAGAGAGAATGTCCCAGGTCATGAGAGAATGGGAAGAGGCAGAACGTCAAGCAAAGAACTTGCCTAAAGCTGATAAGAAGGCAGTTATCCAGCATTTCCAGGAGAAAGTGGAATCTTTGGAACAGGAAGCAGCCAACGAGAGACAGCAGCTGGTGGAGACACACATGGCCAGAGTGGAAGCCATGCTCAATGACCGCCGCCGCCTGGCCCTGGAGAACTACATCACCGCTCTGCAGGCTGTTCCTCCTCGGCCTCGTCACGTGTTCAATATGCTAAAGAAGTATGTCCGCGCAGAACAGAAGGACAGACAGCACACCCTAAAGCATTTCGAGCATGTGCGCATGGTGGATCCCAAGAAAGCCGCTCAGATCCGGTCCCAGGTTATGACACACCTCCGTGTGATTTATGAGCGCATGAATCAGTCTCTCTCCCTGCTCTACAACGTGCCTGCAGTGGCCGAGGAGATTCAGGATGAAGTTGATGAGCTGCTTCAGAAAGAGCAAAACTATTCAGATGACGTCTTGGCCAACATGATTAGTGAACCAAGGATCAGTTACGGAAACGATGCTCTCATGCCATCTTTGACCGAAACGAAAACCACCGTGGAGCTCCTTCCCGTGAATGGAGAGTTCAGCCTGGACGATCTCCAGCCGTGGCATTCTTTTGGGGCTGACTCTGTGCCAGCCAACACAGAAAACGAAGTTGAGCCTGTTGATGCCCGCCCTGCTGCCGACCGAGGACTGACCACTCGACCAGGTTCTGGGTTGACAAATATCAAGACGGAGGAGATCTCTGAAGTGAAGATGGATGCAGAATTCCGACATGACTCAGGATATGAAGTTCATCATCAAAAATTGGTGTTCTTTGCAGAAGATGTGGGTTCAAACAAAGGTGCAATCATTGGACTCATGGTGGGCGGTGTTGTCATAGCGACAGTGATCGTCATCACCTTGGTGATGCTGAAGAAGAAACAGTACACATCCATTCATCATGGTGTGGTGGAGGTTGACGCCGCTGTCACCCCAGAGGAGCGCCACCTGTCCAAGATGCAGCAGAACGGCTACGAAAATCCAACCTACAAGTTCTTTGAGCAGATGCAGAACTAGACCCCCGCCACAGCAGCCTCTGAAGTTGGACAGCAAAACCATTGCTTCACTACCCATCGGTGTCCATTTATAGAATAATGTGGGAAGAAACAAACCCGTTTTATGATTTACTCATTATCGCCTTTTGACAGCTGTGCTGTAACACAAGTAGATGCCTGAACTTGAATTAATCCACACATCAGTAATGTATTCTATCTCTCTTTACATTTTGGTCTCTATACTACATTATTAATGGGTTTTGTGTACTGTAAAGAATTTAGCTGTATCAAACTAGTGCATGAATAGATTCTCTCCTGATTATTTATCACATAGCCCCTTAGCCAGTTGTATATTATTCTTGTGGTTTGTGACCCAATTAAGTCCTACTTTACATATGCTTTAAGAATCGATGGGGGATGCTTCATGTGAACGTGGGAGTTCAGCTGCTTCTCTTGCCTAAGTATTCCTTTCCTGATCACTATGCATTTTAAAGTTAAACATTTTTAAGTATTTCAGATGCTTTAGAGAGATTTTTTTTCCATGACTGCATTTTACTGTACAGATTGCTGCTTCTGCTATATTTGTGATATAGGAATTAAGAGGATACACACGTTTGTTTCTTCGTGCCTGTTTTATGTGCACACATTAGGCATTGAGACTTCAAGCTTTTCTTTTTTTGTCCACGTATCTTTGGGTCTTTGATAAAGAAAAGAATCCCTGTTCATTGTAAGCACTTTTACGGGGCGGGTGGGGAGGGGTGCTCTGCTGGTCTTCAATTACCAAGAATTCTCCAAAACAATTTTCTGCAGGATGATTGTACAGAATCATTGCTTATGACATGATCGCTTTCTACACTGTATTACATAAATAAATTAAATAAAATAACCCCGGGCAAGACTTTTCTTTGAAGGATGACTACAGACATTAAATAATCGAAGTAATTTTGGGTGGGGAGAAGAGGCAGATTCAATTTTCTTTAACCAGTCTGAAGTTTCATTTATGATACAAAAGAAGATGAAAATGGAAGTGGCAATATAAGGGGATGAGGAAGGCATGCCTGGACAAACCCTTCTTTTAAGATGTGTCTTCAATTTGTATAAAATGGTGTTTTCATGTAAATAAATACATTCTTGGAGGAGC"